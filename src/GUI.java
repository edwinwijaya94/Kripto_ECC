
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Edwin
 */
public class GUI extends javax.swing.JFrame {

    //attr
    byte[] plainByte;
    
    Point B; //basis point
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        
        //init ECC
        
        ECC.setEq(1, 16, 251);
        ECC.countGaloisField();
        B = new Point(12,230); //basis
        
        for (long i = 0;i<ECC.GaloisField.size();i++){
            System.out.println("G"+i+" "+ECC.GaloisField.get((int) i));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        privateLabel = new javax.swing.JLabel();
        publicLabel = new javax.swing.JLabel();
        publicKeyField1 = new javax.swing.JTextField();
        privateKeyField1 = new javax.swing.JTextField();
        saveKeyButton1 = new javax.swing.JButton();
        encryptButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        processTimeLabel1 = new javax.swing.JLabel();
        loadKeyButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        initFileSizeLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        encryptedFileSizeLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        input1 = new javax.swing.JTextArea();
        inputLabel = new javax.swing.JLabel();
        openButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        output1 = new javax.swing.JTextArea();
        keyLabel2 = new javax.swing.JLabel();
        saveCipherButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        output2 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        privateLabel1 = new javax.swing.JLabel();
        publicLabel1 = new javax.swing.JLabel();
        publicKeyField2 = new javax.swing.JTextField();
        privateKeyField2 = new javax.swing.JTextField();
        saveKeyButton2 = new javax.swing.JButton();
        decryptButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        processTimeLabel2 = new javax.swing.JLabel();
        loadKeyButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        input2 = new javax.swing.JTextArea();
        keyLabel3 = new javax.swing.JLabel();
        inputLabel1 = new javax.swing.JLabel();
        openButton2 = new javax.swing.JButton();
        abpChooser = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ElGamal ECC");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Key"));

        privateLabel.setText("Private");

        publicLabel.setText("Public");

        publicKeyField1.setEditable(false);
        publicKeyField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publicKeyField1ActionPerformed(evt);
            }
        });

        privateKeyField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateKeyField1ActionPerformed(evt);
            }
        });

        saveKeyButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saveKeyButton1.setText("Save Key");
        saveKeyButton1.setName(""); // NOI18N
        saveKeyButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveKeyButton1ActionPerformed(evt);
            }
        });

        encryptButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        encryptButton.setText("Encrypt");
        encryptButton.setName(""); // NOI18N
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Process Time :");

        processTimeLabel1.setText("0 ms");

        loadKeyButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loadKeyButton1.setText("Load");
        loadKeyButton1.setName(""); // NOI18N
        loadKeyButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadKeyButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Initial File Size:");

        initFileSizeLabel1.setText("0 bytes");

        jLabel4.setText("Encrypted File Size: ");

        encryptedFileSizeLabel.setText("0 bytes");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(privateLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(privateKeyField1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(loadKeyButton1))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(publicLabel)
                            .addGap(18, 18, 18)
                            .addComponent(publicKeyField1))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(saveKeyButton1)
                            .addGap(18, 18, 18)
                            .addComponent(encryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(processTimeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(initFileSizeLabel1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encryptedFileSizeLabel)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(privateLabel)
                    .addComponent(privateKeyField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadKeyButton1))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publicLabel)
                    .addComponent(publicKeyField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveKeyButton1)
                    .addComponent(encryptButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(processTimeLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(initFileSizeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(encryptedFileSizeLabel)))
        );

        input1.setColumns(20);
        input1.setRows(5);
        jScrollPane1.setViewportView(input1);

        inputLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputLabel.setText("PlainText :");

        openButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        openButton1.setText("Open");
        openButton1.setName(""); // NOI18N
        openButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButton1ActionPerformed(evt);
            }
        });

        output1.setColumns(20);
        output1.setRows(5);
        jScrollPane2.setViewportView(output1);

        keyLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyLabel2.setText("Ciphertext :");

        saveCipherButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saveCipherButton.setText("Save");
        saveCipherButton.setName(""); // NOI18N
        saveCipherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCipherButtonActionPerformed(evt);
            }
        });

        output2.setColumns(20);
        output2.setRows(5);
        jScrollPane3.setViewportView(output2);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Key"));

        privateLabel1.setText("Private");

        publicLabel1.setText("Public");

        publicKeyField2.setEditable(false);

        privateKeyField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateKeyField2ActionPerformed(evt);
            }
        });

        saveKeyButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saveKeyButton2.setText("Save Key");
        saveKeyButton2.setName(""); // NOI18N
        saveKeyButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveKeyButton2ActionPerformed(evt);
            }
        });

        decryptButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        decryptButton.setText("Decrypt");
        decryptButton.setName(""); // NOI18N
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Process Time :");

        processTimeLabel2.setText("0 ms");

        loadKeyButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loadKeyButton2.setText("Load");
        loadKeyButton2.setName(""); // NOI18N
        loadKeyButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadKeyButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(privateLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(privateKeyField2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loadKeyButton2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(publicLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(publicKeyField2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(saveKeyButton2)
                        .addGap(18, 18, 18)
                        .addComponent(decryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(processTimeLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(privateLabel1)
                    .addComponent(privateKeyField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadKeyButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publicLabel1)
                    .addComponent(publicKeyField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveKeyButton2)
                    .addComponent(decryptButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(processTimeLabel2))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        input2.setColumns(20);
        input2.setRows(5);
        jScrollPane4.setViewportView(input2);

        keyLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyLabel3.setText("Plaintext :");

        inputLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputLabel1.setText("Ciphertext :");

        openButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        openButton2.setText("Open");
        openButton2.setName(""); // NOI18N
        openButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButton2ActionPerformed(evt);
            }
        });

        abpChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "a=1; b=16; p=251", "a=-477; b=74; p=239", "a=11; b=-206; p=241"}));
        abpChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abpChooserActionPerformed(evt);
            }
        });
        abpChooser.setSelectedIndex(0);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(abpChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(inputLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(openButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(keyLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(saveCipherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(openButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(keyLabel3)))))
                        .addGap(100, 100, 100))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abpChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(openButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(inputLabel)
                                .addComponent(keyLabel2)
                                .addComponent(saveCipherButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(openButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(keyLabel3)
                                .addComponent(inputLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void privateKeyField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateKeyField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_privateKeyField1ActionPerformed

    private void openButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButton1ActionPerformed
        // TODO add your handling code here:
        fileChooser.setDialogTitle("Open Plain Text");
        int returnVal = fileChooser.showOpenDialog(this);

        // process selected file
        String filePath = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            filePath = file.getAbsolutePath();
            Long fileSize = file.length();
            initFileSizeLabel1.setText(fileSize.toString() + " bytes");
        } else {
            System.out.println("File access cancelled by user.");
        }

        //load selected file
        FileReader fileReader = null;
        try {
            fileReader = new FileReader(filePath);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //load as bytes
        Path path = Paths.get(filePath);
        try {
            plainByte = Files.readAllBytes(path);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Always wrap FileReader in BufferedReader.
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        try {
            input1.read(bufferedReader, filePath);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openButton1ActionPerformed

    private void saveCipherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCipherButtonActionPerformed
        // TODO add your handling code here:
        fileChooser.setDialogTitle("Save Cipher Text");
        int returnVal = fileChooser.showSaveDialog(this);
        
        // process selected file
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            Long fileSize = file.length();
            encryptedFileSizeLabel.setText(fileSize + " bytes");
            try (BufferedWriter fileOut = new BufferedWriter(new FileWriter(file))) {
                output1.write(fileOut);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveCipherButtonActionPerformed

    private void saveKeyButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveKeyButton1ActionPerformed
        // TODO add your handling code here:
        fileChooser.setDialogTitle("Save Key");
        int returnVal = fileChooser.showSaveDialog(this);
       
        // process selected file
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String filePath = file.getAbsolutePath();
            File privateKeyFile = new File(filePath +".pri");
            File publicKeyFile = new File(filePath +".pub");
            try (BufferedWriter fileOut = new BufferedWriter(new FileWriter(privateKeyFile))) {
                privateKeyField1.write(fileOut);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (BufferedWriter fileOut = new BufferedWriter(new FileWriter(publicKeyFile))) {
                publicKeyField1.write(fileOut);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveKeyButton1ActionPerformed

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        // TODO add your handling code here:
        
      long startTime = System.currentTimeMillis();
      
        ElGamal E = new ElGamal();
        long priB = Long.parseLong(this.privateKeyField1.getText());
        Point pub = E.generatePublicKey(priB, B);
        this.publicKeyField1.setText("("+pub.x + ","+pub.y+")");
        String encrypted;
        try {
            encrypted = E.EncryptElGamal(plainByte,pub,B);
            output1.append(encrypted); // append to jtextarea
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        long stopTime = System.currentTimeMillis();
        long elapsedTime = stopTime - startTime;
        this.processTimeLabel1.setText(String.valueOf(elapsedTime) + " ms");
//        //read by line
//        String s[] = input1.getText().split("\\r?\\n");
//        ArrayList<String>inputList = new ArrayList<>(Arrays.asList(s));
//        for(int i=0; i<inputList.size(); i++){
//            String message = inputList.get(i);
//            output1.append(encrypted + "\n"); // append to jtextarea
//        }
        
    }//GEN-LAST:event_encryptButtonActionPerformed

    private void privateKeyField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateKeyField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_privateKeyField2ActionPerformed

    private void saveKeyButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveKeyButton2ActionPerformed
        // TODO add your handling code here:
        fileChooser.setDialogTitle("Save Key");
        int returnVal = fileChooser.showSaveDialog(this);
       
        // process selected file
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String filePath = file.getAbsolutePath();
            File privateKeyFile = new File(filePath +".pri");
            File publicKeyFile = new File(filePath +".pub");
            try (BufferedWriter fileOut = new BufferedWriter(new FileWriter(privateKeyFile))) {
                privateKeyField2.write(fileOut);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (BufferedWriter fileOut = new BufferedWriter(new FileWriter(publicKeyFile))) {
                publicKeyField2.write(fileOut);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveKeyButton2ActionPerformed

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
        // TODO add your handling code here:
        
        long startTime = System.currentTimeMillis();
        ElGamal E = new ElGamal();
        long priB = Long.parseLong(this.privateKeyField1.getText());
        Point pub = E.generatePublicKey(priB, B);
        this.publicKeyField2.setText("("+pub.x + ","+pub.y+")");
        String ciphertext = input2.getText();
        String decrypted;
        try {
            decrypted = E.DecryptElGamal(ciphertext,priB);
            output2.append(decrypted); // append to jtextarea
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        long stopTime = System.currentTimeMillis();
        long elapsedTime = stopTime - startTime;
        this.processTimeLabel2.setText(String.valueOf(elapsedTime) + " ms");
        
    }//GEN-LAST:event_decryptButtonActionPerformed

    private void openButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButton2ActionPerformed
        // TODO add your handling code here:
        fileChooser.setDialogTitle("Open Cipher Text");
        int returnVal = fileChooser.showOpenDialog(this);

        // process selected file
        String filePath = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            filePath = file.getAbsolutePath();
        } else {
            System.out.println("File access cancelled by user.");
        }

        //load selected file
        FileReader fileReader = null;
        try {
            fileReader = new FileReader(filePath);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
//        //load as bytes
//        Path path = Paths.get(filePath);
//        try {
//            plainByte = Files.readAllBytes(path);
//        } catch (IOException ex) {
//            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
        // Always wrap FileReader in BufferedReader.
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        try {
            input2.read(bufferedReader, filePath);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_openButton2ActionPerformed

    private void publicKeyField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publicKeyField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_publicKeyField1ActionPerformed

    private void loadKeyButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadKeyButton1ActionPerformed
        // TODO add your handling code here:
        fileChooser.setDialogTitle("Load Private Key");
        int returnVal = fileChooser.showOpenDialog(this);
        
        
        // process selected file
        String filePath = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            filePath = file.getAbsolutePath();
        } else {
            System.out.println("File access cancelled by user.");
        }

        //load selected file
        FileReader fileReader = null;
        try {
            fileReader = new FileReader(filePath);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Always wrap FileReader in BufferedReader.
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        try {
            privateKeyField1.read(bufferedReader, filePath);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadKeyButton1ActionPerformed

    private void loadKeyButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadKeyButton2ActionPerformed
        // TODO add your handling code here:
        fileChooser.setDialogTitle("Load Private Key");
        int returnVal = fileChooser.showOpenDialog(this);

        // process selected file
        String filePath = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            filePath = file.getAbsolutePath();
        } else {
            System.out.println("File access cancelled by user.");
        }

        //load selected file
        FileReader fileReader = null;
        try {
            fileReader = new FileReader(filePath);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Always wrap FileReader in BufferedReader.
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        try {
            privateKeyField2.read(bufferedReader, filePath);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadKeyButton2ActionPerformed

    private void abpChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abpChooserActionPerformed
        // TODO add your handling code here:
        ECC.GaloisField = new ArrayList();
        if(abpChooser.getSelectedIndex() == 0){
            ECC.setEq(1, 16, 251);
            
        } else if(abpChooser.getSelectedIndex() == 1){
            ECC.setEq(-477, 74, 239);
        }else{
            ECC.setEq(11, -206, 241);
        }
        
        ECC.countGaloisField();
        B = ECC.GaloisField.get((int)Math.random()*(255-0));
        for (long i = 0;i<ECC.GaloisField.size();i++){
            System.out.println("G"+i+" "+ECC.GaloisField.get((int) i));
        }
    }//GEN-LAST:event_abpChooserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox abpChooser;
    private javax.swing.JButton decryptButton;
    private javax.swing.JButton encryptButton;
    private javax.swing.JLabel encryptedFileSizeLabel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel initFileSizeLabel1;
    private javax.swing.JTextArea input1;
    private javax.swing.JTextArea input2;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JLabel inputLabel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel keyLabel2;
    private javax.swing.JLabel keyLabel3;
    private javax.swing.JButton loadKeyButton1;
    private javax.swing.JButton loadKeyButton2;
    private javax.swing.JButton openButton1;
    private javax.swing.JButton openButton2;
    private javax.swing.JTextArea output1;
    private javax.swing.JTextArea output2;
    private javax.swing.JTextField privateKeyField1;
    private javax.swing.JTextField privateKeyField2;
    private javax.swing.JLabel privateLabel;
    private javax.swing.JLabel privateLabel1;
    private javax.swing.JLabel processTimeLabel1;
    private javax.swing.JLabel processTimeLabel2;
    private javax.swing.JTextField publicKeyField1;
    private javax.swing.JTextField publicKeyField2;
    private javax.swing.JLabel publicLabel;
    private javax.swing.JLabel publicLabel1;
    private javax.swing.JButton saveCipherButton;
    private javax.swing.JButton saveKeyButton1;
    private javax.swing.JButton saveKeyButton2;
    // End of variables declaration//GEN-END:variables
}
